--[[
works with R6 and R15
equip bacon hair before using
controls:
W,A,S,D,Q,E,Shift

(You will automaticly reset if the hair gets destroyed)
]]

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

if not getgenv().Network then
	getgenv().Network = {
		BaseParts = {};
		FakeConnections = {};
		Connections = {};
		Output = {
			Enabled = true;
			Prefix = "[NETWORK] ";
			Send = function(Type,Output,BypassOutput)
				if typeof(Type) == "function" and (Type == print or Type == warn or Type == error) and typeof(Output) == "string" and (typeof(BypassOutput) == "nil" or typeof(BypassOutput) == "boolean") then
					if Network["Output"].Enabled == true or BypassOutput == true then
						Type(Network["Output"].Prefix..Output);
					end;
				elseif Network["Output"].Enabled == true then
					error(Network["Output"].Prefix.."Output Send Error : Invalid syntax.");
				end;
			end;
		};
		CharacterRelative = false;
	}

	Network["Output"].Send(print,": Loading.")
	Network["Velocity"] = Vector3.new(14.46262424,14.46262424,14.46262424); --exactly 25.1 magnitude
	Network["RetainPart"] = function(Part,ReturnFakePart) --function for retaining ownership of unanchored parts
		assert(typeof(Part) == "Instance" and Part:IsA("BasePart") and Part:IsDescendantOf(workspace),Network["Output"].Prefix.."RetainPart Error : Invalid syntax: Arg1 (Part) must be a BasePart which is a descendant of workspace.")
		assert(typeof(ReturnFakePart) == "boolean" or typeof(ReturnFakePart) == "nil",Network["Output"].Prefix.."RetainPart Error : Invalid syntax: Arg2 (ReturnFakePart) must be a boolean or nil.")
		if not table.find(Network["BaseParts"],Part) then
			if Network.CharacterRelative == true then
				local Character = LocalPlayer.Character
				if Character and Character.PrimaryPart then
					local Distance = (Character.PrimaryPart.Position-Part.Position).Magnitude
					if Distance > 1000 then
						Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it is more than "..gethiddenproperty(LocalPlayer,"MaximumSimulationRadius").." studs away.")
						return false
					end
				else
					Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as the LocalPlayer Character's PrimaryPart does not exist.")
					return false
				end
			end
			table.insert(Network["BaseParts"],Part)
			Part.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)
			Network["Output"].Send(print,"PartOwnership Output : PartOwnership applied to BasePart "..Part:GetFullName()..".")
			if ReturnFakePart == true then
				return FakePart
			end
		else
			Network["Output"].Send(warn,"RetainPart Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it already active.")
			return false
		end
	end

	Network["RemovePart"] = function(Part) --function for removing ownership of unanchored part
		assert(typeof(Part) == "Instance" and Part:IsA("BasePart"),Network["Output"].Prefix.."RemovePart Error : Invalid syntax: Arg1 (Part) must be a BasePart.")
		local Index = table.find(Network["BaseParts"],Part)
		if Index then
			table.remove(Network["BaseParts"],Index)
			Network["Output"].Send(print,"RemovePart Output: PartOwnership removed from BasePart "..Part:GetFullName()..".")
		else
			Network["Output"].Send(warn,"RemovePart Warning : BasePart "..Part:GetFullName().." not found in BaseParts table.")
		end
	end

	Network["SuperStepper"] = Instance.new("BindableEvent") --make super fast event to connect to
	for _,Event in pairs({RunService.Stepped,RunService.Heartbeat}) do
		Event:Connect(function()
			return Network["SuperStepper"]:Fire(Network["SuperStepper"],tick())
		end)
	end

	Network["PartOwnership"] = {};
	Network["PartOwnership"]["PreMethodSettings"] = {};
	Network["PartOwnership"]["Enabled"] = false;
	Network["PartOwnership"]["Enable"] = coroutine.create(function() --creating a thread for network stuff
		if Network["PartOwnership"]["Enabled"] == false then
			Network["PartOwnership"]["Enabled"] = true --do cool network stuff before doing more cool network stuff
			Network["PartOwnership"]["PreMethodSettings"].ReplicationFocus = LocalPlayer.ReplicationFocus
			LocalPlayer.ReplicationFocus = workspace
			Network["PartOwnership"]["PreMethodSettings"].SimulationRadius = gethiddenproperty(LocalPlayer,"SimulationRadius")
			Network["PartOwnership"]["Connection"] = Network["SuperStepper"].Event:Connect(function() --super fast asynchronous loop
				sethiddenproperty(LocalPlayer,"SimulationRadius",1/0)
				for _,Part in pairs(Network["BaseParts"]) do --loop through parts and do network stuff
					coroutine.wrap(function()
						if Part:IsDescendantOf(workspace) then
							if Network.CharacterRelative == true then
								local Character = LocalPlayer.Character;
								if Character and Character.PrimaryPart then
									local Distance = (Character.PrimaryPart.Position - Part.Position).Magnitude
									if Distance > 1000 then
										Network["Output"].Send(warn,"PartOwnership Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as it is more than "..gethiddenproperty(LocalPlayer,"MaximumSimulationRadius").." studs away.")
										Lost = true;
										Network["RemovePart"](Part)
									end
								else
									Network["Output"].Send(warn,"PartOwnership Warning : PartOwnership not applied to BasePart "..Part:GetFullName()..", as the LocalPlayer Character's PrimaryPart does not exist.")
								end
							end
							Part.Velocity = Network["Velocity"]+Vector3.new(0,math.cos(tick()*10)/100,0) --keep network by sending physics packets of 30 magnitude + an everchanging addition in the y level so roblox doesnt get triggered and fuck your ownership
						else
							Network["RemovePart"](Part)
						end
					end)()
				end
			end)
			Network["Output"].Send(print,"PartOwnership Output : PartOwnership enabled.")
		else
			Network["Output"].Send(warn,"PartOwnership Output : PartOwnership already enabled.")
		end
	end)
	Network["PartOwnership"]["Disable"] = coroutine.create(function()
		if Network["PartOwnership"]["Connection"] then
			Network["PartOwnership"]["Connection"]:Disconnect()
			LocalPlayer.ReplicationFocus = Network["PartOwnership"]["PreMethodSettings"].ReplicationFocus
			sethiddenproperty(LocalPlayer,"SimulationRadius",Network["PartOwnership"]["PreMethodSettings"].SimulationRadius)
			Network["PartOwnership"]["PreMethodSettings"] = {}
			for _,Part in pairs(Network["BaseParts"]) do
				Network["RemovePart"](Part)
			end
			Network["PartOwnership"]["Enabled"] = false
			Network["Output"].Send(print,"PartOwnership Output : PartOwnership disabled.")
		else
			Network["Output"].Send(warn,"PartOwnership Output : PartOwnership already disabled.")
		end
	end)
	Network["Output"].Send(print,": Loaded.")
end

coroutine.resume(Network["PartOwnership"]["Enable"])

player = game:GetService("Players").LocalPlayer
input = game:GetService("UserInputService")
character = player.Character
humanoid = character.Humanoid
root = character.HumanoidRootPart
camera = workspace.CurrentCamera
fling_part = character["Pal Hair"].Handle 


torso = "UpperTorso"
if humanoid.RigType == Enum.HumanoidRigType.R6 then
	fling_part.Mesh:Destroy()
	torso = "Torso"
end

local lp = game.Players.LocalPlayer -- local player var
local char = lp.Character -- char var

lp.Character = nil -- nil character for pdeath
lp.Character = char -- newvar

local hrp = char:FindFirstChild("HumanoidRootPart") -- hrp check
if hrp == nil then return end -- return if no hrp

wait(game.Players.RespawnTime + .3) -- nil wait

hrp:Destroy() -- rip hrp
char[torso]:Destroy() -- rip torso
local clone = char["Body Colors"]:Clone() -- body colors clone
char["Body Colors"]:Destroy() -- delete any instances from char that replicates deletion
clone.Parent = char -- parent back in clone in case some script uses it

for i,v in pairs(character:GetDescendants()) do
	if v:IsA("BasePart") and v ~= fling_part then
		v:Destroy()
	end
end

camera.CameraSubject = fling_part

current_position = fling_part.Position + Vector3.new(0,10,0)

fling_part.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)

Network.RetainPart(fling_part)

local resetBindable = Instance.new("BindableEvent")
resetBindable.Event:connect(function()
	fling_part:Destroy()
end)

game:GetService("StarterGui"):SetCore("ResetButtonCallback", resetBindable)

player.DevEnableMouseLock = false

coroutine.wrap(function()
	while task.wait() do
		if fling_part.Parent == nil then
			humanoid:Destroy()
			camera:Destroy()
			game:GetService("StarterGui"):SetCore("ResetButtonCallback", true)
			player.DevEnableMouseLock = true
			vbreak = true
			break
		end
		fling_part.Position = current_position
		fling_part.Velocity = Vector3.new(0,0,30)
		fling_part.RotVelocity = Vector3.new(9e9,9e9,9e9)
		
	end
end)()

speed = 0.75


while wait() do
	if vbreak == true then
		break
	end
	camera.CameraSubject = fling_part
	if input:IsKeyDown(Enum.KeyCode.D) then
		current_position += camera.CFrame.RightVector * speed
	end
	if input:IsKeyDown(Enum.KeyCode.A) then
		current_position += camera.CFrame.RightVector * -speed
	end
	if input:IsKeyDown(Enum.KeyCode.W) then
		current_position += camera.CFrame.LookVector * speed
	end
	if input:IsKeyDown(Enum.KeyCode.S) then
		current_position += camera.CFrame.LookVector * -speed
	end
	if input:IsKeyDown(Enum.KeyCode.E) then
		current_position += camera.CFrame.UpVector * speed
	end
	if input:IsKeyDown(Enum.KeyCode.Q) then
		current_position += camera.CFrame.UpVector * -speed
	end
	if input:IsKeyDown(Enum.KeyCode.LeftShift) then do
			speed = 1.5
		end else
		speed = 0.75
	end
end

-- Find the part named "fling_brick" in the game
local flingBringPart = game.Workspace:WaitForChild("fling_brick")

-- Define the onPartTouched function
local function onPartTouched(otherPart)
	local character = otherPart.Parent
	local player = game.Players:GetPlayerFromCharacter(character)
	if player then
		player:Kick("You have been kicked from the game.")
	end
end

-- Connect the onPartTouched function to the Touched event of the "fling_brick" part
flingBringPart.Touched:Connect(onPartTouched)
